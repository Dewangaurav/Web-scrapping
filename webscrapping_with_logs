import os
import glob
import time
import logging
import pandas as pd
from selenium import webdriver
from selenium.webdriver.firefox.service import Service as FirefoxService
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from openpyxl import load_workbook
from openpyxl.styles import Font

# === SETUP LOGGING ===
# Get the directory of the current script
script_dir = os.path.dirname(os.path.abspath(__file__))

# Set up logging to file and console
log_file = os.path.join(script_dir, "script_log.txt")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(log_file, mode='w'),  # Write logs to file
        logging.StreamHandler()  # Print logs to console
    ]
)
logger = logging.getLogger(__name__)

logger.info("Script started.")

# === SETUP SELENIUM ===
def get_default_esr_profile_path():
    """Find the default Firefox ESR profile."""
    logger.info("Locating the default Firefox ESR profile.")
    if os.name == 'nt':  # Windows
        base_path = os.path.expandvars(r"%APPDATA%\Mozilla\Firefox\Profiles")
    elif os.name == 'posix':  # macOS/Linux
        base_path = os.path.expanduser("~/Library/Application Support/Firefox/Profiles")
    else:
        raise Exception("Unsupported Operating System")

    profile_paths = glob.glob(os.path.join(base_path, "*.default-esr"))
    if profile_paths:
        return profile_paths[0]
    else:
        logger.error("No default-esr Firefox profile found.")
        raise FileNotFoundError("No default-esr Firefox profile found.")

# Set up geckodriver path
geckodriver_path = os.path.join(script_dir, "geckodriver.exe")
logger.info(f"Geckodriver path set to: {geckodriver_path}")

# Initialize Firefox options
firefox_options = FirefoxOptions()

try:
    profile_path = get_default_esr_profile_path()
    firefox_options.profile = profile_path
    logger.info(f"Using Firefox profile: {profile_path}")
except Exception as e:
    logger.error(f"Error finding Firefox profile: {e}")
    raise

firefox_options.binary_location = r"C:\Program Files\Mozilla Firefox\firefox.exe"
firefox_options.set_preference("browser.download.dir", os.path.expanduser("~/Downloads"))
firefox_options.set_preference("browser.download.folderList", 2)
firefox_options.set_preference("browser.helperApps.neverAsk.saveToDisk", "application/vnd.ms-excel")

service = FirefoxService(executable_path=geckodriver_path)
driver = webdriver.Firefox(service=service, options=firefox_options)

# === SCRIPT LOGIC ===
try:
    url = "https://mars-admin.aka.amazon.com/batch-statistics"
    logger.info(f"Opening the webpage: {url}")
    driver.get(url)

    wait = WebDriverWait(driver, 30)
    time.sleep(30)
    logger.info("Page loaded successfully.")
except Exception as e:
    logger.error(f"An error occurred while opening the webpage: {e}")

# Step 1: Click the scroll menu to open dropdown
try:
    print("Attempting to click scroll menu...")
    scroll_menu = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="adPrograms"]')))
    scroll_menu.click()
    print("Scroll menu clicked, selecting moderation option...")
    moderation_option = wait.until(EC.element_to_be_clickable(
        (By.XPATH, "/html/body/div/div/div/div/div/nav[1]/div/ul/li[1]/span/div/div/ul/li[3]/a")))
    moderation_option.click()
    print("Moderation option selected.")
except Exception as e:
    print(f"Error in Step 1: {e}")

# Step 2: Click the 'Marketplace' scroll menu and select 'EN'
try:
    print("Attempting to open 'Marketplace' scroll menu...")
    marketplace_menu = wait.until(EC.element_to_be_clickable(
        (By.XPATH, "//li[//label[contains(text(),'Marketplace')]]/following-sibling::li//button[@id='language']")))
    marketplace_menu.click()
    print("Marketplace menu clicked, selecting 'EN' option...")
    en_option = wait.until(EC.element_to_be_clickable(
        (By.XPATH, "/html/body/div[1]/div/div/div/div/nav[2]/div/ul[2]/li[2]/span/div/div/ul/li[2]/a")))
    driver.execute_script("arguments[0].scrollIntoView(true);", en_option)
    en_option.click()
    print("'EN' option selected.")
except Exception as e:
    print(f"Error in Step 2: {e}")

# Step 3: Press the first button
try:
    print("Attempting to click the first button...")
    first_button = wait.until(
        EC.element_to_be_clickable((By.XPATH, "/html/body/div/div/div/div/div/nav[1]/div/ul/li[2]/span/button[2]")))
    first_button.click()
    print("First button clicked.")
except Exception as e:
    print(f"Failed to click first button: {e}")

# Step 4: Press the second button
try:
    print("Attempting to click the second button...")
    second_button = wait.until(
        EC.element_to_be_clickable((By.XPATH, "/html/body/div/div/div/div/div/nav[1]/div/ul/li[2]/span/button[1]")))
    second_button.click()
    print("Second button clicked.")
except Exception as e:
    print(f"Failed to click second button: {e}")

# Wait for data to load after button press
print("Waiting for data to load...")
time.sleep(10)

# Define keywords to filter the extracted text
keywords = ['HSA', 'IMAGE_MODERATION', 'WEEK', 'Federated', 'BRAND_PROFILE', 'Spotlight', 'Stores', 'ASSET', 'DEFAULT_LABELLING-', 'FEDERATED_SIMILAR_IMAGES']

# **Restricted keywords**: If any of these keywords appear in an element, it will be skipped
restricted_keywords = ['APPEALS', '-HI', 'HI-', '-HI-', '-AR', '-AR-', 'AR-', '-ES', '-ES-', '-NE', 'NE-', '-NE-','-EG','EG-','-EG-','AUDIT','GFD','REMODERATION']

# Initialize variables in case elements are not found
ad_queue, volumes, sla_breached = [], [], []

# 1. Extract "Ad Queue"
try:
    logger.info("Starting data extraction for 'Ad Queue'.")
    ad_queue_elements = driver.find_elements(By.XPATH, "//div[@class='container-fluid']//div[@class='title row']")
    volumes_elements = driver.find_elements(By.XPATH, "//div[contains(@class, 'container-fluid')]//div[contains(@class, 'row')]//div/div[3]/div[1]/span/span[1]")
    sla_breached_elements = driver.find_elements(By.XPATH, "//div[contains(@class, 'container-fluid')]//div[contains(@class, 'row')]//div/div[2]/div[2]/div/div[2]")

    for i, element in enumerate(ad_queue_elements):
        text = element.text

        restricted_match = [restricted for restricted in restricted_keywords if restricted.lower() in text.lower()]
        if restricted_match:
            logger.warning(f"Skipping '{text}' due to restricted keyword(s): {', '.join(restricted_match)}.")
            continue

        if any(keyword.lower() in text.lower() for keyword in keywords):
            ad_queue.append(text)

            if i < len(volumes_elements):
                volumes.append(volumes_elements[i].text)
            if i < len(sla_breached_elements):
                sla_breached_text = sla_breached_elements[i].text
                sla_breached_number = sla_breached_text.split(": ")[1] if ": " in sla_breached_text else sla_breached_text
                sla_breached.append(sla_breached_number)

    logger.info(f"Ad Queue extracted: {ad_queue}")
    logger.info(f"Volumes extracted: {volumes}")
    logger.info(f"SLA Breached extracted: {sla_breached}")
except Exception as e:
    logger.error(f"Error during extraction: {e}")


# Check lengths of lists before padding
print("Checking list lengths before padding:")
print(f"Ad Queue: {len(ad_queue)}, Volumes: {len(volumes)}, SLA breached: {len(sla_breached)}")
logger.info(f"Checking list lengths before padding: Ad Queue: {len(ad_queue)}, Volumes: {len(volumes)}, SLA breached: {len(sla_breached)}")

# Ensure all lists have the same length by padding shorter lists with None
max_length = max(len(ad_queue), len(volumes), len(sla_breached))
ad_queue += [None] * (max_length - len(ad_queue))
volumes += [None] * (max_length - len(volumes))
sla_breached += [None] * (max_length - len(sla_breached))

# Check lengths of lists after padding
print("Checking list lengths after padding:")
print(f"Ad Queue: {len(ad_queue)}, Volumes: {len(volumes)}, SLA breached: {len(sla_breached)}")
logger.info(f"Checking list lengths after padding: Ad Queue: {len(ad_queue)}, Volumes: {len(volumes)}, SLA breached: {len(sla_breached)}")

# Function to sum values based on keyword pairs with bifurcation for Tier1 and Tier2
def sum_values_by_keywords_tiers(ad_queue, volumes, sla_breached, keyword_pairs):
    keyword_sums = {}

    for i, ad_item in enumerate(ad_queue):
        if ad_item is None:  # Skip None values
            continue

        # Identify if the current item belongs to Tier1 or Tier2
        if "Tier1" in ad_item or "TIER1" in ad_item:
            tier = "T1"
        elif "Tier2" in ad_item or "TIER2" in ad_item:
            tier = "T2"
        else:
            continue  # Skip items without Tier information

        for keyword in keyword_pairs:
            if all(kw in ad_item for kw in keyword):
                # Create a unique key for the keyword pair and tier
                key_with_tier = tuple(list(keyword) + [tier])

                # Initialize the sums if not already present
                if key_with_tier not in keyword_sums:
                    keyword_sums[key_with_tier] = {'volume_sum': 0, 'sla_breached_sum': 0}

                # Add volume and SLA breached values
                keyword_sums[key_with_tier]['volume_sum'] += int(volumes[i])
                keyword_sums[key_with_tier]['sla_breached_sum'] += int(sla_breached[i])

    return keyword_sums


# Keyword pairs for summing values
keyword_pairs = [
    ('FEDERATED', 'TEXT'),
    ('FEDERATED', 'ASIN'),
    ('BRAND', 'LOGO'),
    ('CUSTOM', 'IMAGE'),
    ('IMAGE', 'MODERATION'),
    ('BRAND', 'PROFILE'),
    ('HSA', 'SG'),
    ('HSA', 'AE'),
    ('HSA', 'SA'),
    ('ASSET', 'TIER'),
    ('STORE', 'SPOTLIGHT'),
]

# Call the function to sum values with Tier1 and Tier2 separation
summed_results = sum_values_by_keywords_tiers(ad_queue, volumes, sla_breached, keyword_pairs)

# Prepare data for the new DataFrame
summed_ad_queue = []
summed_volumes = []
summed_sla_breached = []

for keywords, totals in summed_results.items():
    # Add the keyword pair and tier to the Ad Queue
    summed_ad_queue.append('  '.join(filter(None, keywords)))
    summed_volumes.append(totals['volume_sum'])
    summed_sla_breached.append(totals['sla_breached_sum'])

# Calculate the total of Volumes and SLA Breached
total_volumes = sum(summed_volumes)
total_sla_breached = sum(summed_sla_breached)

# Append the 'Total' row
summed_ad_queue.append('Total')
summed_volumes.append(total_volumes)
summed_sla_breached.append(total_sla_breached)

# Create the DataFrame
data = {
    "Ad Queue": summed_ad_queue,
    "Volumes": summed_volumes,
    "SLA Breached": summed_sla_breached,
}

df = pd.DataFrame(data)

# Define the custom sort order with T1 and T2
custom_order = [
    "FEDERATED  TEXT  T1", "FEDERATED  TEXT  T2", "FEDERATED  ASIN  T1", "FEDERATED  ASIN  T2",
    "BRAND  LOGO  T1", "BRAND  LOGO  T2", "CUSTOM  IMAGE  T1", "CUSTOM  IMAGE  T2",
    "IMAGE  MODERATION  T1", "IMAGE  MODERATION  T2", "BRAND  PROFILE  T1", "BRAND  PROFILE  T2",
    "HSA  SG  T1", "HSA  SG  T2", "HSA  AE  T1", "HSA  AE  T2", "HSA  SA  T1", "HSA  SA  T2",
    "ASSET  TIER  T1", "ASSET  TIER  T2", "STORE  SPOTLIGHT  T1", "STORE  SPOTLIGHT  T2", "Total"
]

# Set 'Ad Queue' as a categorical type with the specified custom order
df["Ad Queue"] = pd.Categorical(df["Ad Queue"], categories=custom_order, ordered=True)

# Sort by 'Ad Queue' in the custom order, then by 'Volumes' and 'SLA Breached' in descending order
df = df.sort_values(by=["Ad Queue", "Volumes", "SLA Breached"], ascending=[True, False, False])

# Save the DataFrame to an Excel file
output_path = os.path.join(os.path.expanduser("~/Downloads"), "Volumes.xlsx")
df.to_excel(output_path, index=False)

print(f"Summed and sorted data with Tier1 and Tier2 saved to {output_path}")
logger.info(f"Summed and sorted data with Tier1 and Tier2 saved to {output_path}")

from datetime import datetime
from openpyxl import load_workbook
from openpyxl.styles import Font

# Path to the Excel file
output_path = os.path.join(os.path.expanduser("~/Downloads"), "Volumes.xlsx")

# Get the current date and time
current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# Load the Excel file you just saved
wb = load_workbook(output_path)
ws = wb.active

# Write the current date and time to cell A1
ws['A22'] = f"Generated on: {current_datetime}"


# Bold the column headers (first row)
for cell in ws[1]:  # First row contains headers
    cell.font = Font(bold=True)

# Bold the "Total" row
for row in ws.iter_rows():
    for cell in row:
        if cell.value == "Total":  # Check if the cell contains "Total"
            for total_cell in row:  # Apply bold to all cells in the "Total" row
                total_cell.font = Font(bold=True)
            break  # Exit the loop after processing the "Total" row

# Save the updated Excel file
wb.save(output_path)

print(f"Excel file with bold 'Total' row saved at {output_path}")
# Close the WebDriver
driver.quit()

